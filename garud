#!/bin/bash
# coded by R0X4R
# Contributers: KathanP19 (https://github.com/KathanP19), f8al (https://github.com/f8al), theamanrawat (https://github.com/theamanrawat), remonsec (https://github.com/remonsec).

wget -q --spider http://google.com
if [ $? -ne 0 ];then
    echo "Connect to internet before running this tool!"
    exit 1
fi

domain=
file=

while getopts ":d:f:" o; do
    case "${o}" in
        d)
            domain=${OPTARG} ;;

        f)
            file=${OPTARG} ;;

    esac
done

load_colors() {
    RED="\e[31m"
    BOLD="\e[1m"
    NORMAL="\e[0m"
    GREEN="\e[92m"
    YELLOW="\e[93m"
    BLINK="\e[5m"
}

if [ -z "$domain" ]
  then
    load_colors
    echo -e "${RED}\n █▀▀ ▄▀█ █▀█ █░█ █▀▄"
    echo -e "${RED} █▄█ █▀█ █▀▄ █▄█ █▄▀"
    echo -e "${NORMAL}${BOLD}\n coded by ${GREEN}R0X4R${NORMAL}${BOLD} with ${RED}<3"
    echo -e "${NORMAL}${BOLD}${RED}${BLINK}\n ● Error target not supplied. ${NORMAL}"
    echo -e "${NORMAL}${BOLD}\n Usage: ${NORMAL}-d\t ${BOLD}target you want to scan (${YELLOW}target.com${NORMAL})"
    echo -e "${NORMAL}${BOLD} Usage: ${NORMAL}-f\t ${BOLD}output directory where you want to save file (${YELLOW}~/target-output/${NORMAL})"
    echo -e "${NORMAL}${BOLD} garud ${GREEN}-d${NORMAL} target.com ${GREEN}-f${NORMAL} target-output \n"
    exit 1
fi

if [ -z "$file" ]
  then
    load_colors
    echo -e "${RED}\n █▀▀ ▄▀█ █▀█ █░█ █▀▄"
    echo -e "${RED} █▄█ █▀█ █▀▄ █▄█ █▄▀"
    echo -e "${NORMAL}${BOLD}\n coded by ${GREEN}R0X4R${NORMAL}${BOLD} with ${RED}<3"
    echo -e "${NORMAL}${BOLD}${RED}${BLINK}\n ● Error output directory not supplied. ${NORMAL}"
    echo -e "${NORMAL}${BOLD}\n Usage: ${NORMAL}-d\t ${BOLD}target you want to scan (${YELLOW}target.com${NORMAL})"
    echo -e "${NORMAL}${BOLD} Usage: ${NORMAL}-f\t ${BOLD}output directory where you want to save file (${YELLOW}~/target-output/${NORMAL})"
    echo -e "${NORMAL}${BOLD} garud ${GREEN}-d${NORMAL} target.com ${GREEN}-f${NORMAL} target-output \n"
    exit 1
fi

if [ ! -d "$file" ]; then
        mkdir $file
fi

cd $file/

show_logo() {
	clear

    echo -e ${GREEN}"\n          .                                                      . "
    echo -e ${GREEN}"        .n                   .                 .                  n. "
    echo -e ${GREEN}"  .   .dP                  dP                   9b                 9b.    . "
    echo -e ${GREEN}" 4    qXb         .       dX                     Xb       .        dXp     t "
    echo -e ${GREEN}"dX.    9Xb      .dXb    __                         __    dXb.     dXP     .Xb "
    echo -e ${GREEN}"9XXb._       _.dXXXXb dXXXXbo.                 .odXXXXb dXXXXb._       _.dXXP "
    echo -e ${GREEN}" 9XXXXXXXXXXXXXXXXXXXVXXXXXXXXOo.           .oOXXXXXXXXVXXXXXXXXXXXXXXXXXXXP "
    echo -e ${GREEN}"  v9XXXXXXXXXXXXXXXXXXXXXi-   -vOOO8b   d8OOOi-   -vXXXXXXXXXXXXXXXXXXXXXPi "
    echo -e ${GREEN}"    v9XXXXXXXXXXXPi v9XXi   DIE    v98v8Pi  HUMAN   vXXPi v9XXXXXXXXXXXPi "
    echo -e ${GREEN}"        -------       9X.          .db|db.          .XP       ------- "
    echo -e ${GREEN}"                        )b.  .dbo.dPivviv9b.odb.  .dX( "
    echo -e ${GREEN}"                      ,dXXXXXXXXXXXb     dXXXXXXXXXXXb. "
    echo -e ${GREEN}"                     dXXXXXXXXXXXPi   .   v9XXXXXXXXXXXb "
    echo -e ${GREEN}"                    dXXXXXXXXXXXXb   d|b   dXXXXXXXXXXXXb "
    echo -e ${GREEN}"                    9XXbi   vXXXXXb.dX|Xb.dXXXXXi   vdXXP "
    echo -e ${GREEN}"                     vi      9XXXXXX(   )XXXXXXP      vi "
    echo -e ${GREEN}"                              XXXX X.vvi.X XXXX "
    echo -e ${GREEN}"                              XP^Xivb   divX^XX "
    echo -e ${GREEN}"                              X. 9  v   i  P )X "
    echo -e ${GREEN}"                              vb  v       i  di "
    echo -e ${GREEN}"                               v             i "

    echo -e "${RED}\n                             █▀▀ ▄▀█ █▀█ █░█ █▀▄"
    echo -e "${RED}                             █▄█ █▀█ █▀▄ █▄█ █▄▀"
    echo -e "${NORMAL}${BOLD}\n                           coded by ${GREEN}R0X4R${NORMAL}${BOLD} with ${RED}<3"

    sleep 1
}

scan_targets() {
    echo -e "${NORMAL}${BOLD}\n\n Target: ${RED}$domain${NORMAL}"
    echo -e "${NORMAL}${BOLD} Output: ${GREEN}$(pwd)/${NORMAL}"
}

run_subenum() {
    echo -ne "${NORMAL}${BOLD}${YELLOW}${BLINK}\n ● Scanning is in progress:${NORMAL}${BOLD} Scanning subdomains of $domain [${GREEN}20%${NORMAL}] \r"
    assetfinder --subs-only $domain | sort -u > $file-assetfinder.txt
    python3 ~/tools/Sublist3r/sublist3r.py -d $domain -o $file-sublister.txt &> /dev/null
    subfinder -silent -d $domain -o $file-subfinder.txt > /dev/null
    amass enum -passive -norecursive -noalts -d $domain -o $file-amass.txt &> /dev/null
    echo -ne "${NORMAL}${BOLD}${YELLOW}${BLINK} ● Scanning is in progress:${NORMAL}${BOLD} Filtering subdomains of $domain [${GREEN}30%${NORMAL}] \r"
    sleep 1s
    cat $file-sublister.txt $file-assetfinder.txt $file-subfinder.txt $file-amass.txt | grep -v "*" | sort -u | sed '/@/d' | sed '/<BR>/d' | sed '/\_/d'| sed '/*/d' > $file-finalsubdomains.txt
    echo -ne "${NORMAL}${BOLD}${YELLOW}${BLINK} ● Scanning is in progress:${NORMAL}${BOLD} Filtering valid subdomains of $domain [${GREEN}35%${NORMAL}] \r"
    sleep 1s
    cat $file-finalsubdomains.txt | sort -u | uniq -u | httpx -silent > $file-alive.txt
}

run_gettitle() {
    sleep 1s
    echo -ne "${NORMAL}${BOLD}${YELLOW}${BLINK} ● Scanning is in progress:${NORMAL}${BOLD} Getting titles of valid subdomains of $domain [${GREEN}40%${NORMAL}] \r"
    cat $file-alive.txt | get-title > $file-gettitle.txt
    
}

run_subtake() {
    sleep 1s
    echo -ne "${NORMAL}${BOLD}${YELLOW}${BLINK} ● Scanning is in progress:${NORMAL}${BOLD} Checking for subdomain takeovers of subdomains of $domain [${GREEN}50%${NORMAL}] \r"
    subjack -w $file-finalsubdomains.txt -t 20 -ssl -c ~/tools/fingerprints.json -o $file-subjack.txt &> /dev/null
    subzy -targets $file-finalsubdomains.txt -hide_fails --verify_ssl -concurrency 20 | tee $file-subzy.txt &> /dev/null
    takeover.py -l $file-finalsubdomains.txt -t 10 -o $file-takeover.txt &> /dev/null
}

run_params() {
    sleep 1s
    echo -ne "${NORMAL}${BOLD}${YELLOW}${BLINK} ● Scanning is in progress:${NORMAL}${BOLD} Getting all parameters of $domain [${GREEN}70%${NORMAL}] \r"
    cat $file-finalsubdomains.txt | waybackurls > $file-waybackurls.txt
    cat $file-finalsubdomains.txt | gau > $file-gau.txt
    cat $file-gau.txt $file-waybackurls.txt | sort -u | uniq -u > $file-params.txt
    rm $file-gau.txt
    rm $file-waybackurls.txt
}

run_gf() {
    echo -ne "${NORMAL}${BOLD}${YELLOW}${BLINK} ● Scanning is in progress:${NORMAL}${BOLD} Filtering all parameters of $domain [${GREEN}75%${NORMAL}] \r"
    cat $file-params.txt | gf xss | sed 's/=.*/=/' | sed 's/URL: //' > $file-xss.txt
    cat $file-params.txt | gf ssrf > $file-ssrf.txt
    cat $file-params.txt | gf ssti > $file-ssti.txt
    cat $file-params.txt | gf redirect > $file-redirect.txt
    cat $file-params.txt | gf sqli > $file-sqli.txt
    cat $file-params.txt | gf lfi > $file-lfi.txt
    cat $file-params.txt | gf rce > $file-rce.txt
}

check_xss() {
    echo -ne "${NORMAL}${BOLD}${YELLOW}${BLINK} ● Scanning is in progress:${NORMAL}${BOLD} Checking for xss in $domain [${GREEN}85%${NORMAL}] \r"
    cat $file-xss.txt | kxss > $file-xssvuln.txt
    dalfox file $file-xss.txt pipe --silence --no-color --no-spinner -o $file-dalfox.txt &> /dev/null
}

check_open() {
    echo -ne "${NORMAL}${BOLD}${YELLOW}${BLINK} ● Scanning is in progress:${NORMAL}${BOLD} Checking for openredirection in $domain [${GREEN}97%${NORMAL}] \r"
    ffuf -c -u "FUZZ///www.evil.com" -r -w $file-alive.txt -mr evil.com -s > $file-ffufv.txt # this oneliner I got from Musab Khan youtube channel. Video Link: https://youtu.be/LVQcVDWZv88
    ffuf -c -u "FUZZ//@www.evil.com" -r -w $file-alive.txt -mr evil.com -s >> $file-ffufv.txt
    ffuf -c -u "FUZZ//\/\/www.evil.com" -r -w $file-alive.txt -mr evil.com -s >> $file-ffufv.txt
    cat $file-redirect.txt | grep -a -i \=http | qsreplace 'http://www.evil.com/' | while read host do;do curl -s -L $host -I|grep "evil.com" && echo "$host - vulnerable" ;done > $file-vulnred.txt # this oneliner I got from Hacktify's youtube channel. Video Link: https://youtu.be/Va_TvyBjtKA
    echo -ne "${NORMAL}${BOLD}${YELLOW}${BLINK} ● Scanning is in progress:${NORMAL}${BOLD} Setting things up for $domain [${GREEN}100%${NORMAL}] \r"
    echo -ne "\n"
    echo -e "${NORMAL}${BOLD} ● Scanning Completed. Thanks for using Garud."
}

slack_bot() {
    echo -ne "${NORMAL}${BOLD}${YELLOW}\n ● Sending notification to your slack.\n"
    function notification_text()
    {
    echo -e "Hii there,\nRecon completed for $domain.\nAll your outputs are saved in $(pwd).\n Thanks for using Garud.";
    }
    python3 ~/slack-bot.py "$(notification_text)."
}

run_scans() {
    scan_targets
    run_subenum
    run_gettitle
    run_subtake
    run_params
    run_gf
    check_xss
    check_open
    slack_bot
    exit 1
}

while true
do
    load_colors
    show_logo
    run_scans
done
